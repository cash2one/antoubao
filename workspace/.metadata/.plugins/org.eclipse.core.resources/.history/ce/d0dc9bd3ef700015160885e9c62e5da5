#!/usr/bin/python
#encoding=utf-8

from header import *

def usage():
    print "COMMAND:"
    print "\tpython "+sys.argv[0]+" [-all|-t|-p]"
    print ""
    print "OPTIONS:"
    print "\t-all: 执行所有周的评级策略"
    print "\t-t [timestamp]: 执行指定周的评级策略"
    print "\t-p [platform_id]: 计算指定平台的评级策略"
    exit(-1)

def getData():
    #读取定量数据
    quanti = readQuanti(rQUANTI)
    
    #读取总分
    scored, scoreRange = readScored(rSMOOTH)
    
    #读取状态
    status = readStatus(rSTATUS)
    
    return quanti, status, scored, scoreRange

def rank(scored, scoreRange):
    _score = {}
    scoreDict = {}
    for level in LEVEL_LIST[:-1]:
        scoreDict[np.percentile(scoreRange, LEVEL_PERCENTAGE_DICT[level])] = level
    for score in sorted(scoreDict.keys(), reverse=True):
        if scored['score'] > score:
            scored['level'] = scoreDict[score]
            break
    if 'level' not in scored:
        scored['level'] = "C"
    for k,v in scoreDict.items():
        _score[v] = k
    return scored, _score

def rankPunish(quanti, timestamp, scored, scoreDict, scoreArr, maxScore, minScore, status):
    if scored['level'] == 'C':
        return scored
    info = ''
    if 'downgrading_info' not in scored.keys():
        scored['downgrading_info'] = info
    quanti4WeekAve = fourWeekAve(quanti, timestamp, INVALID_TITLE)
    score = scored['score']
    level = ['A++', 'A+', 'A', 'B++', 'B+', 'B', 'C']
    while True:
        oldinfo = info
        if status < 0.89 and scored['score'] > scoreDict['A']:
            info += "#BADPLAT#"
        if quanti4WeekAve['not_returned_yet'] < 1 and scored['score'] > scoreDict['A+']:
            info += "#YET#"
        if (quanti[timestamp]['top10_ratio_loan'] > 0.25 and scored['score'] > scoreDict['A++']) \
            or (quanti[timestamp]['top10_ratio_loan'] > 0.35 and scored['score'] > scoreDict['A+']) \
            or (quanti[timestamp]['top10_ratio_loan'] > 0.55 and scored['score'] > scoreDict['A']):
            info += "#TOP10#"
        if (quanti[timestamp]['ave_annualized_return'] > 15.5 and scored['score'] > scoreDict['A++']) \
            or (quanti[timestamp]['ave_annualized_return'] > 15.99 and scored['score'] > scoreDict['A+']) \
            or (quanti[timestamp]['ave_annualized_return'] > 16.99 and scored['score'] > scoreDict['A']) \
            or (quanti[timestamp]['ave_annualized_return'] > 18.99 and scored['score'] > scoreDict['B++']):
            info += "#AVE#"
        if (quanti[timestamp]['weekly_total_borrower'] < 50 and scored['score'] > scoreDict['A++']) \
            or (quanti[timestamp]['weekly_total_borrower'] < 20 and scored['score'] > scoreDict['A+']) \
            or (quanti[timestamp]['weekly_total_borrower'] < 5 and scored['score'] > scoreDict['A']):
            info += "#BORROWER#"
        if (quanti[timestamp]['weekly_lending'] < 500 and scored['score'] > scoreDict['A+']) \
            or (quanti[timestamp]['weekly_lending'] < 300 and scored['score'] > scoreDict['A']):
            info += "#LENDING#"
        if oldinfo == info:
            break
        scored['downgrading_info'] += info

        for key in scoreArr.keys():
            pos = 0
            while pos < len(scoreArr[key]) and scored[key] < scoreArr[key][pos]:
                pos+=1
            if pos == len(scoreArr[key]):
                continue
            if pos == 0:
                score1 = maxScore[key]
            else:
                score1 = scoreArr[key][pos-1]
            if pos == len(scoreArr[key])-1:
                score2 = scoreArr[key][pos]
                score3 = minScore[key]
            else:
                score2 = scoreArr[key][pos]
                score3 = scoreArr[key][pos+1]
            if score1 == score2:
                continue
            scored[key] = ((scored[key]-score2)/(score1-score2))**(0.5)*(score2-score3)+score3
            if key == 'score':
                scored['level'] = level[pos+1]
        '''
        pos = level.index(scored['level'])
        scored['level'] = level[pos+1]
        if pos == 0:
            score1 = maxScore['score']
        else:
            score1 = scoreDict[level[pos-1]]
        score2 = scoreDict[level[pos]]
        if pos == 5:
            score3 = minScore['score']
        else:
            score3 = scoreDict[level[pos+1]]
        scored['score'] = ((scored['score']-score2)/(score1-score2))**(0.5)*(score2-score3)+score3
        '''
    if info != "":
        scored["oldscore"] = score
    return scored

def limit(values):
    maxData = {}
    minData = {}
    arr = {}
    scoreArr = {}
    for platid in values.keys():
        for timestamp in values[platid].keys():
            if timestamp not in arr.keys():
                arr[timestamp] = {}
            for key in ["activeness_credibility", "growth", "distribution", "security", "capital_adequacy_ratio", "pellucidity", "score"]:
                if key not in arr[timestamp].keys():
                    arr[timestamp][key] = []
                arr[timestamp][key].append(values[platid][timestamp][key])
    for timestamp in arr.keys():
        if timestamp not in maxData.keys():
            maxData[timestamp] = {}
        if timestamp not in minData.keys():
            minData[timestamp] = {}
        if timestamp not in scoreArr.keys():
            scoreArr[timestamp] = {}
        for key in arr[timestamp].keys():
            tmp = sorted(arr[timestamp][key], reverse=True)
            maxData[timestamp][key] = tmp[0]
            minData[timestamp][key] = tmp[-1]
            scoreArr[timestamp][key] = []
            LEVEL_PERCENTAGE_DICT_temp = {"A++":98, "A+":81.3, "A":52, "B++":51, "B+":20.1987, "B":5.9}
            for level in LEVEL_LIST[:-1]:
                scoreArr[timestamp][key].append(np.percentile(tmp, LEVEL_PERCENTAGE_DICT_temp[level]))
    return maxData, minData, scoreArr

result = {}
scoreDict = {}
count = 0

if len(sys.argv) < 2:
    usage()
elif sys.argv[1] == '-all':
    #准备数据
    rRAKPUN.flushdb()
    quanti, status, scored, scoreRange = getData()
    maxData, minData, scoreArr = limit(scored)
    for platid in scored.keys():
        if platid not in result.keys():
            result[platid] = {}
        if platid not in status.keys():
            status[platid] = 1
        for timestamp in scored[platid]:
            #评级
            scoreSort = sorted(scoreRange[timestamp].keys(), reverse=True)
            result[platid][timestamp], scoreDict[timestamp] = rank(scored[platid][timestamp], scoreSort)
            #降级惩罚
            result[platid][timestamp] = rankPunish(quanti[platid], timestamp, result[platid][timestamp], scoreDict[timestamp], scoreArr[timestamp], maxData[timestamp], minData[timestamp], status[platid])
            fromHashToRedis(rRAKPUN, result[platid][timestamp], 'platform_id', 'date')
            count += 1
elif sys.argv[1] == '-t':
    #-t 参数合法性检查
    if len(sys.argv) < 3:
        usage()
    else:
        timestamp = int(sys.argv[2])
        if timestamp < SCOREDATE:
            print "Invalid date("+str(timestamp)+"), the must be equal or greater than "+str(SCOREDATE)
            exit(-1)
    #准备数据
    quanti, status, scored, scoreRange = getData()
    for platid in scored.keys():
        if platid not in result.keys():
            result[platid] = {}
        if platid not in status.keys():
            status[platid] = 1
        #评级
        scoreSort = sorted(scoreRange[timestamp].keys(), reverse=True)
        result[platid][timestamp], scoreDict[timestamp] = rank(scored[platid][timestamp], scoreSort)
        #降级惩罚
        result[platid][timestamp] = rankPunish(quanti[platid], timestamp, result[platid][timestamp], scoreDict[timestamp], scoreSort[0], scoreSort[-1])
        fromHashToRedis(rRAKPUN, result[platid][timestamp], 'platform_id', 'date')
        count += 1
elif sys.argv[1] == '-p':
    #-p 参数合法性检查
    if len(sys.argv) < 3:
        usage()
    else:
        platid = sys.argv[2]
        if len(platid) != 10:
            print "Invalid platform_id("+str(platid)+")"
            exit(-1)
    #准备数据
    quanti, status, scored, scoreRange = getData()
    result[platid] = {}
    status[platid] = 1
    for timestamp in scored[platid]:
        #评级
        scoreSort = sorted(scoreRange[timestamp].keys(), reverse=True)
        result[platid][timestamp], scoreDict[timestamp] = rank(scored[platid][timestamp], scoreSort)
        #降级惩罚
        result[platid][timestamp] = rankPunish(quanti[platid], timestamp, result[platid][timestamp], scoreDict[timestamp], scoreSort[0], scoreSort[-1])
        fromHashToRedis(rRAKPUN, result[platid][timestamp], 'platform_id', 'date')
        count += 1
else:
    usage()

print "Rank data("+str(count)+") written to redis-db("+str(dbRAKPUN)+")!"
