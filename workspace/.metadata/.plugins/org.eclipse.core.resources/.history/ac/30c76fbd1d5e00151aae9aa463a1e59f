#!/use/bin/python
#coding=utf-8

import time
from atbtools.header import *
from atbtools.computeTools import *
from math import ceil
import threading
import time
import timeit
import socket

def fun2(a, _dict):
    _dict["x"] = a^2
    return _dict["x"]

def fun1(a):
    exec('x = ' + str(a))
    return x

#计算一个数的进制表示法
def getNotation(_N, _base_number):
    value_list = []
    while _N >= _base_number:
        (_N , reminder) = divmod(_N, _base_number)
        value_list.append(reminder)
    value_list.append(_N)
    return value_list[::-1]

#通过进制表示法的结果计算出原数
def returnNotation(_list, _base_number):
    digit_number = len(_list)
    N = 0
    for i in range(digit_number):
        N += _list[digit_number - 1 - i] * (_base_number ** i)
    return N

#将进制表示法结果表示为字母
def getCharacters(_list):
    return "".join([chr(value + 64) for value in _list])

def specialDvi(_N, _base_number):
    value_list = []
    while _N >= _base_number:
        (_N , reminder) = divmod(_N, _base_number)
        if reminder == 0:
            _N -= 1
            reminder = 26
        value_list.append(reminder)
    if _N != 0:
        value_list.append(_N)
    return value_list[::-1]

if __name__ == "__main__":
    base_number = 26
    min_N = 1
    max_N = 5000
    for N in range(min_N, max_N + 1):
#         #原数的进制表示法
#         value_list_old = getNotation(N, base_number) #求出进制标示方法
#         digit_number_old = len(value_list_old) #求出位数
#         #求出第二位起每位依次减1之后所对应的原数的进制表示法
#         N_new = N - (base_number ** (digit_number_old - 1) - 1) / (base_number - 1)
#         value_list = getNotation(N_new, base_number)
#         #将1再重新加回去，注意要在前面补位(1)
#         digit_number_new = len(value_list)
#         digit_number_diff = digit_number_old - digit_number_new
#         if digit_number_diff == 0:
#             #前面的减1对首位没影响
#             value_list_new = [value + 1 for value in value_list[1:]]
#             value_list_new.insert(0, value_list[0])
#         else:
#             #前面的减1对首位有影响
#             value_list_new = [value + 1 for value in value_list]
#             #补位
#             for i in range(digit_number_diff - 1):
#                 value_list_new.insert(0, 1)
#         assert  returnNotation(value_list_new, base_number) == N
#         A = getCharacters(value_list_new)
        print  getCharacters(specialDvi(N, base_number))
        print B
        
#     t1 = timeit.Timer('fun1(x)', "from __main__ import fun1;x=200")
#     print t1.timeit(number = 10000) 
#     print min(t1.repeat(3, 10000))
#     t2 = timeit.Timer('x = 200; fun1(x)', "from __main__ import fun1")
#     print t2.timeit(number = 10000) 
#     print min(t2.repeat(3, 10000))
#     t1 = timeit.Timer('x = 100; fun1(x, {})', "from __main__ import fun1")
#     print t1.timeit(number = 10000) 
#     num = 0
#     mylock = threading.Lock()
#     def fun1(p):
#         global num
#         time.sleep(1)
#         mylock.acquire()
#         print p,num
#         num += 1
#         mylock.release()
#     
#     ts = []
#     for i in range(10):
#         th = threading.Thread(target=fun1, args=[i])
#         ts.append(th)
#         th.start()
#     
# #     for th in ts:    
# #         th.join()
        
#     s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     s.bind(('127.0.0.1', 8125))
#     s.listen(8)
#     while 1:
#         connection, address = s.accept()
#         buf = connection.recv(10)
#         connection.send(buf)
#         
#     s.close()
