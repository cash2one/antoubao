#!/use/bin/python
#coding=utf-8

import time
from atbtools.header import *
from atbtools.computeTools import *
from math import ceil
import threading
import time
import timeit

def fun1(a):
    _dict = {}
    _dict["x"] = a^2
    return b

def fun2(a):
    return a^2

if __name__ == "__main__":
    t2 = timeit.Timer('fun2(100)', "from __main__ import fun2")
    print t2.timeit(number = 10000) 
    t1 = timeit.Timer('fun1(100)', "from __main__ import fun1")
    print t1.timeit(number = 10000) 
#     num = 0
#     mylock = threading.Lock()
#     def fun1(p):
#         global num
#         time.sleep(1)
#         mylock.acquire()
#         print p,num
#         num += 1
#         mylock.release()
#     
#     ts = []
#     for i in range(10):
#         th = threading.Thread(target=fun1, args=[i])
#         ts.append(th)
#         th.start()
#     
# #     for th in ts:    
# #         th.join()
        
    print "end!"