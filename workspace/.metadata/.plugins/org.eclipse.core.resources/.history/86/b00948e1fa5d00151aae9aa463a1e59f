#!/use/bin/python
#coding=utf-8

import time
from atbtools.header import *
from atbtools.computeTools import *
from math import ceil
import threading
import time
import timeit

def fun2(a, _dict):
    _dict["x"] = a^2
    return _dict["x"]

def fun1(a):
    exec('x = ' + str(a))
    return x

if __name__ == "__main__":
    t1 = timeit.Timer('fun1(x)', "from __main__ import fun1;x=200")
    print t1.timeit(number = 10000) 
    print min(t1.repeat(3, 10000))
    t2 = timeit.Timer('x = 200; fun1(x)', "from __main__ import fun1")
    print t2.timeit(number = 10000) 
    print min(t2.repeat(3, 10000))
#     t1 = timeit.Timer('x = 100; fun1(x, {})', "from __main__ import fun1")
#     print t1.timeit(number = 10000) 
#     num = 0
#     mylock = threading.Lock()
#     def fun1(p):
#         global num
#         time.sleep(1)
#         mylock.acquire()
#         print p,num
#         num += 1
#         mylock.release()
#     
#     ts = []
#     for i in range(10):
#         th = threading.Thread(target=fun1, args=[i])
#         ts.append(th)
#         th.start()
#     
# #     for th in ts:    
# #         th.join()
        
    print "end!"