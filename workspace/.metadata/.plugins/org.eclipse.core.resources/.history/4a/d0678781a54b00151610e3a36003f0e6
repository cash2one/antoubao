#!/usr/bin/python
# coding=utf8

from atbtools.header import *
from atbtools.mysqlTools import *
import random
import math
import time
import os.path
import re

class PinYin(object):
    def __init__(self, dict_file='word.data'):
        self.word_dict = {}
        self.dict_file = dict_file

    def load_word(self):
        if not os.path.exists(self.dict_file):
            raise IOError("NotFoundFile")

        with file(self.dict_file) as f_obj:
            for f_line in f_obj.readlines():
                try:
                    line = f_line.split('    ')
                    self.word_dict[line[0]] = line[1]
                except:
                    line = f_line.split('   ')
                    self.word_dict[line[0]] = line[1]

    def hanzi2pinyin(self, string=""):
        result = []
        _string = string
        if not isinstance(string, unicode):
            _string = string.decode("utf-8")
        for char in _string:
            if char in "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
                result.append(char.lower())
            else:
                key = '%X' % ord(char)
#                 print key
                result.append(self.word_dict.get(key, char).split()[0][:-1].lower())
        return result

    def hanzi2pinyin_split(self, string="", split=""):
        result = self.hanzi2pinyin(string)
        if split == "":
            return result
        else:
            return split.join(result)
    
# 通过某一时间T戳得到N周前的星期M当天0点的时间戳
def getTimestampZero(timestamp, week, day):
    # 计算最近周日的24点，其中1357401600是2013年1月6日周日的0点          
    timestamp = timestamp - (timestamp - 1357401600) % SECONDSPERWEEK
    return timestamp - week * SECONDSPERWEEK + day * SECONDSPERDAY

#获得一个月份字符串"2015-03"的上一个月份字符串
def getLastMonthString(_this_month_str):
    [year, month] = _this_month_str.split("-")
    if month == "01":
        year = str(int(year) - 1)
        month = "12"
    else:
        month = "%02d" % (int(month) - 1)
    return year + "-" + month

# 通过某一时间T戳得到相应的计算时间戳（前一周周日的零点）
def getDateTimestamp(timestamp):
    # 计算最近周日的24点，其中1357401600是2013年1月6日周日的0点  
    remainder =  (timestamp - 1357401600) % SECONDSPERWEEK
    if remainder % SECONDSPERWEEK == 0:
        return timestamp - SECONDSPERWEEK  
    else:
        return timestamp - remainder

# 根据程序运行时间得到查询时间
def getQueryTime():
    timestamp = int(time.time())
    start_date4reset = -1
    start_date4update = getTimestampZero(timestamp, 4, 0)  # 4周以前的星期日的0点
    start_date = getTimestampZero(timestamp, 1, 0)  # 上一周最近周日的0点，即上上周日的0点
    end_date = getTimestampZero(timestamp, 0, 0)  # 最近周日的0点，即上周日的0点
    return (start_date, end_date, start_date4reset, start_date4update)

# 通过某一时间T戳得到当天的24点的时间戳
def getTimestampTonight(timestamp):
    return timestamp - timestamp % SECONDSPERDAY + SECONDSPERDAY

# 返回二维空数组
def get2DEmptyArray(N):
    emptyArray = []
    while N > 0:
        emptyArray.append([])
        N -= 1
    return emptyArray

# 返回一维空数组
def get1DZeroArray(N):
    emptyArray = []
    while N > 0:
        emptyArray.append(0)
        N -= 1
    return emptyArray

# 插入已排序序列
def insertTopQueue(topQueue, temporaryData, queueLength):
    if len(topQueue) < queueLength:
        topQueue.append(temporaryData)
        topQueue.sort()
        topQueue.reverse() #从大到小排列
        return topQueue
    else:
        if temporaryData > topQueue[0]:
            topQueue.insert(0, temporaryData)
            topQueue.pop()
            return topQueue
        else:
            for i in range(0, len(topQueue) - 1):
                if topQueue[i] >= temporaryData >= topQueue[i + 1]:
                    topQueue.insert(i + 1, temporaryData) #最多只会有queueLength个元素
                    topQueue.pop()
                    return topQueue
        return topQueue

# 返回一个字典内所有value的值的和（如果值是一个列表的话，则应该指定所求元素的位置）
def getColumnSum(tempDiction, columnIndex=0):
    values = tempDiction.values()
    firstvalue = values[0]
    if type(firstvalue) in [int, float]:
        return sum(tempDiction.values())
    total = 0 
    for value in values:
        total += value[columnIndex]
    return total

# 按照字典指定的value的值进行从大到小排序（如果value是一个列表的话，则应该指定排序元素在列表中的位置），返回相应的key的列表
def sortDictByValue(tempDiction, columnIndex=0):
    values_initial = tempDiction.values()
    firstvalue = values_initial[0]
    if type(firstvalue) in [list]:
        values=[]
        for value in values_initial:
            values.append(value[columnIndex])
    else:
        values = values_initial
    keys = tempDiction.keys()
    key_number = len(keys)
    key_sorted_list=tempDiction.keys()
    for i in range(0,key_number-1):
        for j in range(i+1,key_number):
            if values[i] < values[j]:
                values[i], values[j] = values[j], values[i] 
                key_sorted_list[i], key_sorted_list[j] = key_sorted_list[j], key_sorted_list[i]
    return key_sorted_list,values

#如果一个字典的value仍是字典，那么按照这个字典指定的key的value进行排序，从大到小
def sortDictByKeyValue(tempDiction,keyStr):
    values=[]
    for key_temp in tempDiction:
        values.append(tempDiction[key_temp][keyStr])
    key_number = len(tempDiction)
    key_sorted_list=tempDiction.keys()
    for i in range(0,key_number-1):
        for j in range(i+1,key_number):
            if values[i] < values[j]:
                values[i], values[j] = values[j], values[i] 
                key_sorted_list[i], key_sorted_list[j] = key_sorted_list[j], key_sorted_list[i]
    return key_sorted_list,values

#获得两个向量的内积
def getVectorInnerProduct(vector1, vector2):
    inner_product = 0
    for i in range(0,len(vector1)):
        inner_product += vector1[i] * vector2[i]
    return inner_product    

#计算一个列表内所有值的加权平均
def getWeightedMean(list_temp):
    if len(list_temp) == 0:
        return 0
    weight_dict={1:[1],2:[0.7,0.3],3:[0.6,0.2,0.2],4:[0.4,0.3,0.2,0.1]}
    return getVectorInnerProduct(list_temp, weight_dict[len(list_temp)])

#在贝叶斯计算中，通过两个字典的比较，得到一个虚拟指数，表示这两个字典的相似的程度
def getVirtualIndex(dict_test, dict_initial):
    virtualIndex = 1
    for key_temp in dict_test:
        if dict_initial[key_temp] == 0:
            continue
        virtualIndex *= float(dict_test[key_temp])/dict_initial[key_temp]
    return virtualIndex

#返回在一个列表中第一个超过指定值的元素的指标
def getIndexByValue(number, list_initial):
    index_temp = len(list_initial)
    for i in range(0,len(list_initial)):
        if list_initial[i] >= number:
            index_temp = i
            break
    return index_temp

#返回一个列表前N个大项的和（从大到小排列）
def getSumTopN(_list, _N):
    list_new = sorted(_list,reverse = True)
    return sum(list_new[0:_N])

#获得一个数组中间部分的和（按大小排序）
def getCenterSum(list_temp):
    list_order = list(sorted(list_temp))
    list_number = len(list_order)
    lower = max(0, int(math.floor(list_number * LISTCUT)))
    upper = min(list_number - lower, list_number)
    if lower == upper:
        return sum(list_order)
    else:
        return sum(list_order[lower:upper])/(upper-lower)*len(list_temp)

#检查一个字典的值和是否为1
def checkGradeIndex(grade_dict_initial, gradeInt):
    total = 0
    if gradeInt == 0:
        total = getColumnSum(grade_dict_initial, 0)
        if abs(total - 1.0) > 1e-10:
            print total
            print "something wrong with the total_grade."
    else:
        grade_dict={}
        for index in grade_dict_initial:
            grade = grade_dict_initial[index][0]
            if grade not in grade_dict:
                grade_dict[grade]=0
            grade_dict[grade]+=grade_dict_initial[index][1]
        for grade in grade_dict:
            if abs(grade_dict[grade] - 1.0) > 1e-10:
                print grade_dict[grade]
                print "something wrong with the " + str(grade) + "."

#将0、1、2级的指标组装为完整的初始权重字典
def assembledGrade(total_grade_list,first_grade_list,second_grade_list,weight_dict):
    for weight in weight_dict:
        if weight in second_grade_list:
            second_ratio = second_grade_list[weight][1]
            first_ratio = first_grade_list[second_grade_list[weight][0]][1]
            zero_ratio = total_grade_list[first_grade_list[second_grade_list[weight][0]][0]]
        weight_dict[weight] =  second_ratio * first_ratio * zero_ratio
    return weight_dict   

#定义特殊除法，如果分母为零，返回零，否则正常除法
def specialDivision(dividend, divider, default_number=0):
    if abs(divider - 0) < 1e-12:
        return default_number
    else:
        return float(dividend)/divider
    
#列表线性归一化
def getNormalization(list_temp):
    sum_temp = 0
    for value in list_temp:
        sum_temp += value
    return [float(x)/sum_temp for x in list_temp]

# 获得一个数组的HHI指标
def getHHI(totalList):
    total = float(sum(totalList))
    if total < 0.01 / MONEYUNIT:
        return 0
    HHI = 0
    for l in totalList:
        HHI += (l / total) ** 2
    return HHI

# 通过投资人信息字符串获得项目的计息初始日期，默认为defaultTime,如果尚未满标，则计息初始日期为defaultTime，否则，计息初始日期为满标日期的下一天0点    
def getInterestDate(defaultTime, borrowing_amount, invested_amount, investorInfo):
    if len(investorInfo) == 0 or borrowing_amount != invested_amount:
        return defaultTime
    submit_dates = []
    investorArr = investorInfo.split("|")
    for i in range(0, len(investorArr) - 1):
        if i % 3 == 0:
            try:
                temp = int(investorArr[i])
            except:
                return (-1,-1)
            if temp <= 0:
                return (-1,-1)
            else:
                submit_dates.append(temp)
    last_date = max(submit_dates)
    last_date_str = time.strftime("%Y%m%d", time.localtime(last_date))
    interestDate = int(time.mktime(time.strptime(last_date_str, "%Y%m%d"))) + SECONDSPERDAY
    return (last_date,interestDate)

# 通过投资人信息字符串获得第一个投标时间    
def getFirstDate(defaultTime, investorInfo):
    if len(investorInfo) == 0:
        return defaultTime
    submit_dates = []
    investorArr = investorInfo.split("|")
    for i in range(0, len(investorArr) - 1):
        if i % 3 == 0:
            try:
                temp = int(investorArr[i])
            except:
                return (-1,-1)
            if temp <= 0:
                return (-1,-1)
            else:
                submit_dates.append(temp)
    first_date = min(submit_dates)
    first_date_str = time.strftime("%Y%m%d", time.localtime(first_date))
    firstData = int(time.mktime(time.strptime(first_date_str, "%Y%m%d")))
    return (first_date,firstData)

# 一些空白数据的预处理，空数据、null置0等
def replaceNullData(*datas):
    datesOutput = []
    for data in datas:
        try: 
            float(data)
        except:
            data = "0" #if not data.isdigit(): 不能判断浮点数，即10.00.isdigit()=false
        datesOutput.append(str(data))
    if len(datesOutput) == 1:
        return data
    else:
        return datesOutput

# 随机获得一个时间戳创建标
def getRandomTimestamp(max_date_str):
    max_year = max_date_str[0:4]
    max_month = max_date_str[4:6]
    max_day = max_date_str[6:8]
    randomYear = "%04d" % random.randint(int(INITIALYEAR), int(max_year))
    randomMonth = "%02d" % random.randint(1, 12)
    if randomYear == max_year:
        randomMonth = "%02d" % random.randint(1, int(max_month))
    if int(randomMonth) == 2:
        randomDay = random.randint(1, 28)
    else:
        if int(randomMonth) in [1, 3, 5, 7, 8, 10, 12]:
            randomDay = random.randint(1, 31)
        else:
            randomDay = random.randint(1, 30)
    if randomYear == max_year and randomMonth == max_month:
        if int(randomMonth) == 2:
            randomDay = random.randint(1, min(28, int(max_day)))
        else:
            if int(randomMonth) in [1, 3, 5, 7, 8, 10, 12]:
                randomDay = random.randint(1, min(31, int(max_day)))
            else :
                randomDay = random.randint(1, min(30, int(max_day)))   
    randomHour = "%02d" % random.randint(0, 23)
    randomMinute = "%02d" % random.randint(0, 59)
    randomSecond = "%02d" % random.randint(0, 59)
    randomTime = str(randomYear) + str(randomMonth) + str(randomDay) + " " + str(randomHour) + ":" + str(randomMinute) + ":" + str(randomSecond) 
    return int(time.mktime(time.strptime(randomTime, "%Y%m%d %H:%M:%S")))
    
#计算形如"name|monty|name|money"字符串中所包含的总额
def countGross(investor,order=3):
    Gross = 0
    investor_list = investor.split("|")
    for i in range(0, len(investor_list)):
        if i % order == order - 1 :
            try: 
                money_str = investor_list[i].replace(",", "") # 防止出现2,000.00的情况
                if money_str.endswith("元"):
                    money_str = money_str[0:money_str.index("元")]
                Gross += float(money_str) 
            except:
                pass
    return Gross

#获得一个表中的所有不同的字段列表
def getDifferentFieldlist(table_name, _cur, fieldname):
    field_list = []
    stringSQL = "SELECT DISTINCT `" + str(fieldname) + "` FROM " + table_name + " ORDER BY `" + str(fieldname) + "` ASC" 
    _cur.execute(stringSQL)
    for field_temp in _cur.fetchall():
        field_list.append(field_temp[0])
    return field_list

#打印列表
def printList(_list):
    for value in _list:
        print value
        
#打印字典
def printDict(_dict, _show_key = 1):
    if _show_key == 1:
        for key in _dict:
            print key + ":"
            print _dict[key]
    else:
        for key in _dict:
            print _dict[key]
        
#获得一个表中指定时间的信息个数
def getNumberFromFieldByDate(_table, _cur, _date):
    stringSQL = "SELECT COUNT(*) FROM " + _table + " WHERE `date` = '" + str(_date) + "'" 
    _cur.execute(stringSQL)
    return _cur.fetchone()[0]

#获得一个表中的所有不同的字段列表(在某个时间点之前)
def getDifferentFieldlistEarly(table_name, _cur, fieldname, _date):
    field_list = []
    stringSQL = "SELECT DISTINCT `" + str(fieldname) + "` FROM " + table_name + " WHERE `date` <= '" + str(_date) + "' ORDER BY `" + str(fieldname) + "` ASC" 
    _number = _cur.execute(stringSQL)
    if _number != 0:
        for field_temp in _cur.fetchall():
            field_list.append(field_temp[0])
        return field_list
    
#获得一个表中的所有不同的字段列表(在某个时间点之后)
def getDifferentFieldlistLate(table_name, _cur, fieldname, _date):
    field_list = []
    stringSQL = "SELECT DISTINCT `" + str(fieldname) + "` FROM " + table_name + " WHERE `date` >= '" + str(_date) + "' ORDER BY `" + str(fieldname) + "` ASC" 
    _number = _cur.execute(stringSQL)
    if _number != 0:
        for field_temp in _cur.fetchall():
            field_list.append(field_temp[0])
        return field_list

#获得一个表中的所有不同的字段列表(指定时间戳)
def getDifferentFieldlistByDate(table_name, cur_db, fieldname, _date):
    field_list = []
    stringSQL = "SELECT DISTINCT `" + str(fieldname) + "` FROM " + table_name + " Where `date` = '" + str(_date) + "' ORDER BY `" + str(fieldname) + "` ASC" 
    cur_db.execute(stringSQL)
    for field_temp in cur_db.fetchall():
        field_list.append(field_temp[0])
    return field_list

#获得一个字段列表最近几周的数据
def getlatestValueByDate(table_name, _cur, _field, _platform_name, _date, _limit):
    stringSQL = "SELECT `" + _field + "` FROM " + table_name + " Where `date` < '" + str(_date) + "' AND `platform_name` = '" + _platform_name + "' ORDER BY `date` ASC LIMIT " + str(_limit) 
    ret = _cur.execute(stringSQL)
    if ret == 0:
        return None
    else:
        return [x[0] for x in _cur.fetchall()]
    
#获得一个字段列表这一周的数据
def getValueByDate(table_name, _cur, _field, _platform_name, _date):
    stringSQL = "SELECT `" + _field + "` FROM " + table_name + " Where `date` = '" + str(_date) + "' AND `platform_name` = '" + _platform_name + "'" 
    ret = _cur.execute(stringSQL)
    if ret == 0:
        return None
    else:
        return _cur.fetchone()[0]

def return2para():
    return 1,2     

def test():
    print "已经找到包文件."
    
#从指定的表里获取字段值列表，以platform_id和date作为指定条件
def getFieldsDictFromTableByIdByDate(cur,table_name,platform_id,date,fields_list):
    stringSQL = "SELECT " + ','.join(fields_list) +" FROM " + table_name+" WHERE `platform_id` = '" + str(platform_id) + "' AND `date` = '" + str(date) + "'"
    ret_number = cur.execute(stringSQL)
    ret_list = []
    if ret_number == 0:
        return {}.fromkeys(fields_list,0)
    else:
        for field in cur.fetchone():
            ret_list.append(field) 
    return dict(zip(fields_list,ret_list))

#从指定的表里获取字段值列表，以platform_name和date作为指定条件
def getFieldsListFromTableByNameByDate(cur,table_name,platform_name,date,fields_list):
    stringSQL = "SELECT " + ','.join(fields_list) +" FROM " + table_name+" WHERE `platform_name` = '" + str(platform_name) + "' AND `date` = '" + str(date) + "'"
    ret_number = cur.execute(stringSQL)
    ret_list = []
    if ret_number == 0:
        return None
    else:
        for field in cur.fetchone():
            ret_list.append(field) 
    return ret_list

#从指定的表里获取字段值列表，以platform_name和date作为指定条件
def getFieldFromTableByNameByDate(cur,table_name,platform_name,date,field):
    stringSQL = "SELECT " + str(field) +" FROM " + table_name+" WHERE `platform_name` = '" + str(platform_name) + "' AND `date` = '" + str(date) + "'"
    ret_number = cur.execute(stringSQL)
    if ret_number == 0:
        return None
    else:
        return cur.fetchone()[0]

#从指定的表里获取字段值列表，以platform_name和date作为指定条件
def getFieldsFromTableByNameByDate(cur,table_name,platform_name,date,field_list):
    stringSQL = "SELECT `" + "`, `".join(field_list) +"` FROM " + table_name+" WHERE `platform_name` = '" + str(platform_name) + "' AND `date` = '" + str(date) + "'"
    ret_number = cur.execute(stringSQL)
    if ret_number == 0:
        return None
    else:
        return cur.fetchone()

#获得一个table的所有属性值
def getAllColumnsFromTable(_cur, _table, del_list = [], merge_list = None):
    all_columns_list = []
    stringSQL = "SHOW FULL COLUMNS FROM " + _table
    _cur.execute(stringSQL)
    for field_temp in _cur.fetchall():
        if field_temp[0] not in del_list:
            if None != merge_list:
                if field_temp[0] in merge_list:
                    all_columns_list.append(field_temp[0])
            else:
                all_columns_list.append(field_temp[0])
    return all_columns_list 

#从一个文件中获得平台id信息
def getPlatformIdList(_filename):
    platform_id_list = []
    fp = open(_filename)  
    lines = fp.readlines() #读取全部内容  
    for line in lines:  
        platform_id_list.append(line.strip())
    fp.close()
    return platform_id_list  

#去掉字符串中的空白字符
def delBlank(_str):
    return _str.replace("\r","").replace("\t","").replace("\n","").replace(" ","")

#返回第二个列表中的元素在第一个中的下标，没有用-1代替
def getIndexFromList(_list1, _list2):
    _list_index = []
    for _index in _list2:
        try:
            result = _list1.index(_index)
        except:
            result = -1
        _list_index.append(result)
    return _list_index    

#返回第一个列表中是否有第二个列表中的元素
def existListValue(_list1, _list2):
    for value in _list2:
        if value in _list1:
            return True
    return False

#去掉list中每个元素前后的单双引号
def delQuotes(_list):
    clean_list = []
    for _str in _list:
        str_new = _str.replace("'","").replace('"','').replace("“","").replace("”","").replace("‘","").replace("’","")
        clean_list.append(str_new)
    return clean_list

#判断一个值是否在两个值之间（包含等于,None表示无限制），是返回1，不是返回0
def checkThresholdValue(_num,_min, _max):
    _num = float(_num)
    if None == _min and None == _max:
        return 1
    if  None == _min and None != _max:
        return 1 if _num <= float(_max) else 0 
    if  None != _min and None == _max:
        return 1 if float(_min) <= _num else 0
    if  None != _min and None != _max:
        return 1 if float(_min) <= _num <= float(_max) else 0  

#判断一个值是否小于最大值（包含等于,None表示无限制），是返回1，不是返回0
def checkMax(_num,_max):
    if None == _max:
        return 1
    else:
        return 1 if float(_num) <= float(_max) else 0  
    
#判断一个值是否大于最小值（包含等于,None表示无限制），是返回1，不是返回0
def checkMin(_num,_min):
    if None == _min:
        return 1
    else:
        return 1 if float(_num) >= float(_min) else 0 

#将列表中的元素转化为字符串格式
def getString(_list):
    return [str(value) for value in _list]

#将列表中的元素转化为整数格式
def getInteger(_list):
    return [0 if value == None else int(value) for value in _list]

#将列表中的元素转化为浮点数格式
def getFloat(_list):
    return [0 if value == None else float(value) for value in _list]

#获得一个列表下一个线性拟合值：
def forecastLinearValue(_Y):
    number = len(_Y)
    X = range(number)
    sx, sy, sxx, syy, sxy = 0, 0, 0, 0, 0
    for i in range(number):
        sx += X[i]
        sy += _Y[i]
        sxx += X[i] * X[i]
        syy += _Y[i] * _Y[i]
        sxy += X[i] * _Y[i]
    a = (sy*sx/number - sxy)/(sx*sx/number - sxx)
    b = (sy - a*sx)/number
    if (sxx - sx * sx/number) * (syy - sy * sy/number) == 0:
        r = 0
    else:
        r = abs(sy * sx / number - sxy) / math.sqrt((sxx - sx * sx / number)*(syy - sy * sy / number))
    return a, b, r, a * number + b 

#查找所给的平台是否满足有效数据条件
def checkValid(_field_list, _value_list, none_zero_list, _number):
    fields_list = list(_field_list)
    none_zero_index_list = getIndexFromList(fields_list, none_zero_list)
    for i in none_zero_index_list:
        if _value_list[i] == None or float(_value_list[i]) == 0:
            return 0
    if checkZeroNumber(_value_list)[0] > _number:
        return 0
    return 1

#检查列表中零元素的个数以及相应的位置
def checkZeroNumber(_list):
    zero_number = 0
    zero_position = []
    for i in range(len(_list)):
        if 0.0 == _list[i] or None == _list[i]:
            zero_number += 1
            zero_position.append(i)
    return (zero_number, zero_position)

#一直向前追溯至非零值，如果全部为零则返回0
def getLastNoneZero(_cur, _table_name, _fields, _platform_name, _date, _value):
    stringSQL = "SELECT `" + str(_fields) + "` FROM " + _table_name + " WHERE `date` < " + str(_date) + " AND `platform_name`  = '" + str(_platform_name) + "' AND `" + str(_fields) + "` <> '" + str(_value) + "' ORDER BY date DESC LIMIT 1" 
    ret = _cur.execute(stringSQL)
    if ret != 0:
        return float(_cur.fetchone()[0])
    return 0

#一直向后追溯至非零值，如果全部为零则返回0
def getNewestNoneZero(_cur, _table_name, _fields, _platform_name, _date, _value):
    stringSQL = "SELECT `" + str(_fields) + "` FROM " + _table_name + " WHERE `date` > " + str(_date) + " AND `platform_name`  = '" + str(_platform_name) + "' AND `" + str(_fields) + "` <> '" + str(_value) + "' ORDER BY date ASC LIMIT 1" 
    ret = _cur.execute(stringSQL)
    if ret != 0:
        return float(_cur.fetchone()[0])
    return 0

#在一个时期内追溯最近的非零值，如果全部为零则返回默认值
def getNoneZeroValueByPeriod(_cur, _table_name, _fields, _platform_name, _date, _last_weeks, _value):
    start_date = _date
    end_date = _date - (_last_weeks - 1) * SECONDSPERWEEK
    stringSQL = "SELECT `date`, `" + str(_fields) + "` FROM " + _table_name + " WHERE `date` <= '" + str(start_date) + "' AND `date` >= '" + str(end_date) + "' AND `platform_name`  = '" + str(_platform_name) + "' AND `" + str(_fields) + "` <> '" + str(_value) + "' ORDER BY date DESC LIMIT 1" 
    ret = _cur.execute(stringSQL)
    if ret != 0:
        date, value = _cur.fetchone()
        return [int(date), float(value)]
    return [0,0]

#将一个列表中的None都换成零
def getNoNoneList(_list):
    value_list = []
    for value in _list:
        if value != None:
            value_list.append(value)
        else:
            value_list.append(0)
    return value_list
#在一个时期内追溯最近的非空值
def getValueByPeriod(_cur, _table_name, _fields, _platform_name, _date, _last_weeks):
    start_date = _date
    end_date = _date - (_last_weeks - 1) * SECONDSPERWEEK
    stringSQL = "SELECT `date`, `" + str(_fields) + "` FROM " + _table_name + " WHERE `date` <= '" + str(start_date) + "' AND `date` >= '" + str(end_date) + "' AND `platform_name`  = '" + str(_platform_name) + "' AND `" + str(_fields) + "` is not NULL ORDER BY date DESC LIMIT 1" 
    ret = _cur.execute(stringSQL)
    if ret != 0:
        date, value = _cur.fetchone()
        return [int(date), float(value)]
    return [None,None]

#在一个时期内追溯一个指标列表最近的非零值，如果全部为零则返回默认值
def getNoneZeroListByPeriod(_cur, _table_name, _field_list, _platform_name, _date, _last_weeks, _value):
    value_list = []
    for field in _field_list:
        value_list.append(getNoneZeroValueByPeriod(_cur, _table_name, field, _platform_name, _date, _last_weeks, _value)[1])
    return value_list

#表中获得某一指标的最大值和最小值
def getExtremum(_cur, _table_name, _field):
    stringSQL = "SELECT MAX(" + str(_field) + "), MIN(" + str(_field) + ") FROM " + _table_name 
    _cur.execute(stringSQL)
    return _cur.fetchone()

#从表中获取属性值，分别为数据库指针，表明，要获取的属性列表，要去掉的属性列表，接受字典
def getFieldValueFromTableByIdByDate(cur, _table, tag, field_list, _dict, zero_field_index_del_list = []):
    blank_platform_set = set()
    for _id in _dict:
        _id = str(_id)
        status = _dict[_id]["status"]
        platform_name = _dict[_id]["platform_name"]
        _date = _dict[_id]["date"]
        _dict[_id][tag] = []
        stringSQL = "SELECT "+','.join(field_list)+" FROM " + _table+ " WHERE `date` = '" + str(_date) + "' AND `platform_id` = '" + _id + "'"
        have_data = cur.execute(stringSQL)
        #判断是否有数据
        if have_data == 0:
            if status < 1:
                print "Bad " + str(platform_name) + " delete: There is no data on timestamp " + str(_date)
            else:
                print "Good " + str(platform_name) + " delete: There is no data on timestamp " + str(_date)
            blank_platform_set.add(_id)
            continue
        field_values = cur.fetchone()
        for _value in field_values:
            if None == _value:
                _value = 0
            _dict[str(_id)][tag].append(_value)
        #删除某些关键属性为0的站
        _fields = _dict[str(_id)][tag]
        for i in zero_field_index_del_list:
            if _fields[i] == 0:
                if status < 1:
                    print "Bad " + str(platform_name) + " delete: " + field_list[i] + " is zero."
                else:
                    print "Good " + str(platform_name) + " delete: " + field_list[i] + " is zero."             
                blank_platform_set.add(_id)
                break     
    #去掉没有数据或者关键属性值为零的站
    for _id in blank_platform_set:
        del _dict[_id]
    return _dict

# 将为零的定量属性值用平均值来代替
def cleanZeroValueByAverage(field_index_list, _field, _dict):
    field_number = len(_dict.values()[0][_field])
    ave_list = getDictAverage(_dict, _field)
    for _id in _dict:
        _member = _dict[_id][_field]
        for i in range(field_number):
            if i in field_index_list:
                if None == _member[i] or 0 == _member[i]:
                    _member[i] = ave_list[i]
    return _dict

# 获得一个字典下面某个属性值（列表）的平均值（要考虑0值不参与计算）
def getDictAverage(_dict, _field):
    field_number = len(_dict.values()[0][_field])
    _list = []
    for i in range(field_number):
        _list.append([])
    for _id in _dict:
        _field_list = _dict[_id][_field]
        for i in range(field_number):
            _list[i].append(_field_list[i])
    ave_list = [] 
    for i in range(field_number):
        ave_list.append(getListAverage(_list[i],0))
    return ave_list

#计算一个列表的平均值，注意这里考虑了最小阈值
def getListAverage(_list, threshold_min):
    ave = 0
    valid_number = 0
    for _value in list(_list):
        if None != _value and _value > threshold_min:
            valid_number += 1
            ave += _value
    if valid_number != 0:
        return float(ave) / valid_number
    else:
        return 0

#将一个字典的所有属性list插入表格中，_key_initial_list表示字典的一级属性集合，_field表示字典的单独一级属性，它的值为一个列表，对应_field_list
def insertTableByDict( _cur, _conn, _table, _key_initial_list, _dict, sql_method ="insert", _field = None, _field_list = []):
    key_list = _key_initial_list + _field_list
    for _id in _dict:
        value_list = []
        member = _dict[_id]
        for key in _key_initial_list:
            value_list.append(str(member[key]))
        if None != _field:
            for field_temp in member[_field]:
                value_list.append(str(field_temp))
        if sql_method == "insert":
            stringSQL = "INSERT INTO " + _table + "(`" + "`,`".join(key_list) + "`) VALUES('" + "','".join(value_list) + "')"
        elif sql_method == "update":
            key_value_list = []
            for i in range(len(key_list)):
                key_value_list.append("`" + str(key_list[i]) + "` = '" + str(value_list[i]) + "'")
            stringSQL = "UPDATE " + _table + " SET " + ",".join(key_value_list) + " WHERE `platform_id` = '" + str(member["platform_id"]) + "' AND `date` = '" + str(member["date"]) + "'"    
        _cur.execute(stringSQL)
        _conn.commit() 

#从一个_table通过id和date查找相应的属性值_field，并在字典_dict中创造相应的属性插入，None_default表示对空值的处理，为None的时候表示如果查找不到则去掉该字典的子集
def addNewFieldFromTableByIdByDate(_cur,_table,_field,_dict,None_default = None):
    id_none_list = []
    for _id in _dict:
        member = _dict[_id]
        stringSQL = "SELECT " + _field + " FROM " + _table + " WHERE `date` = '" + str(member["date"]) + "' AND `platform_id` ='" + str(member["platform_id"]) + "'"
        row_number = _cur.execute(stringSQL)
        if row_number == 0:
            id_none_list.append(_id)
            member[_field] = None_default
        else:        
            member[_field] = _cur.fetchone()[0]
    #None_default = None的时候删除相应的字典子集
    if None == None_default:
        for _id in id_none_list:
            del _dict[_id]
    return _dict

#改写好站坏站的status分布
def changeStatus(_dict, _field, _change_dict):
    for _id in _dict:
        member = _dict[_id]
        if member[_field] in _change_dict:
            member[_field] = _change_dict[member[_field]]
    return _dict    

#通过给定的区间节点，将连续的预测值变为离散的预测值，其中_interval_node_list必须由小到大排列
def changePredictionFromCToD(_dict, _field, _interval_node_list,_change_value_list):
    interval_node_number = len(_interval_node_list)
    change_value_number = len(_change_value_list)
    if _interval_node_list != sorted(_interval_node_list):
        print "区间设置有误，并不是从小到大排列."
        exit(1)
    if change_value_number - interval_node_number == 1:
        for _id in _dict:
            member = _dict[_id]
            if member[_field] < _interval_node_list[0]:
                member[_field] = _change_value_list[0]
            else:
                for i in range(interval_node_number):
                    if member[_field] >= _interval_node_list[i]:
                        member[_field] = _change_value_list[i+1]
    else:
        print "区间设置有误，间隔数和节点数的差不为1."
        exit(1)
    return _dict 

#比较两个集合正确个数的比例来，注意只取相应的_id
def calculateCorrectProportion(_dict, _field1, _field2, _merge_list):
    correct_proportion = 0
    correct_proportion_length = 0
    for _id in _dict:
        if _id in _merge_list:
            correct_proportion_length += 1
            member = _dict[_id]
            value1 = member[_field1]
            value2 = member[_field2]
            if abs(value1 - value2) < 1E-10:
                correct_proportion += 1
    return float(correct_proportion) / correct_proportion_length

#查找一个时间范围内的所有值
def getFieldsByNameByPeriod(_cur,_tabel_name,_field,_platform_name,_max_date,_min_date):
    values_list = []
    stringSQL = "SELECT " + str(_field) + " FROM " + _tabel_name + " WHERE `date` <= '" + str(_max_date) + "' AND `date` >= '" + str(_min_date) + "' AND `platform_name` ='" + str(_platform_name) + "'"
    ret = _cur.execute(stringSQL)
    if ret == 0:
        return []
    else:
        for rets in _cur.fetchall():
            values_list.append(float(rets[0]))
        return values_list
#指数名单中计算平均排序指标 value
def getValue(_cur, _tabel_name, _fields_list, _platform_name, _date, _lastweeks, first_weight = 0.7, second_weight = 0.3):
    max_date = _date
    min_date = _date - (_lastweeks - 1) * SECONDSPERWEEK
    dividend_str = _fields_list[0]
    divider_str = _fields_list[1]
    dividend_list = getFieldsByNameByPeriod(_cur, _tabel_name, dividend_str, _platform_name, max_date, min_date)
    divider_list = getFieldsByNameByPeriod(_cur, _tabel_name, divider_str, _platform_name, max_date, min_date)
    dividend = getListAverage(dividend_list, 0)
    divider = getListAverage(divider_list, 0)
#     if divider == 0:
#         return 0.0
#     else:
#         return float(dividend)/divider
    return first_weight * dividend + second_weight * divider #0.7 * weekly_lending + 0.3 * total_investor

#合并两个文件
def mergeTxt(_in_name1, _in_name2, _out_name): 
    in_dict1 = getDictByTxt(_in_name1)
    in_dict2 = getDictByTxt(_in_name2)
    id_list = list(set(in_dict1.keys()) | set(in_dict2.keys()))
    id_dict = {}
    for _id in id_list:
        id_dict[_id] = [0,0]
        if _id in in_dict1:
            id_dict[_id][0] = in_dict1[_id]
        if _id in in_dict2:
            id_dict[_id][1] = in_dict2[_id]
    id_list_sorted = sortDictByValue(id_dict, 0)[0]
    fp = open(_out_name, "w")
    for i in range(len(id_list_sorted)):
        _id = id_list_sorted[i]
        number1 = id_dict[_id][0]
        number2 = id_dict[_id][1]
        fp.write(str(_id) + " " + str(number1) + " " + str(number2) + "\n")
    fp.close()
    
#从一个字典类型的txt中获取字典  
def getDictByTxt(_filename):
    fp = open(_filename)  
    lines = fp.readlines() #读取全部内容
    _dict = {}  
    for line in lines:
        line = line.split(":")
        line[0] =  line[0].strip()
        line[1] =  line[1].strip()
        if len(line[0]) == 0:
            line[0] = " "
        _dict[line[0]] = line[1]
    fp.close() 
    return _dict 

#从一个列表类型的txt中获取字典  
def getListByTxt(_filename):
    fp = open(_filename)  
    lines = fp.readlines() #读取全部内容
    _list = []  
    for line in lines:
        _list.append(line.strip())
    fp.close() 
    return _list

#在一个列表中获得不超过指定元素的最大元素
def getValueNoMoreThanValue(_value, _value_list):
    value_list_new = sorted(_value_list, reverse=True) #从大到小
    for _value_temp in value_list_new:
        if _value_temp <= _value:
            return _value_temp
    return None

#在一个列表中获得不小于指定元素的最大元素
def getValueNoLessThanValue(_value, _value_list):
    value_list_new = sorted(_value_list) #从小到大
    for _value_temp in value_list_new:
        if _value_temp >= _value:
            return _value_temp
    return None

#计算线性插值
def calculateLinearValue(_index,_value_list,_index_min,_index_max):
    data_min = _value_list[_index_min]
    data_max = _value_list[_index_max]
    return data_min + (_index - _index_min) * ((data_max - data_min)/(_index_max - _index_min))

#计算不同指标的增长值
def calculateGrowth(_cur, _table, _field, _platform_name, _end_date,  _last_weeks, _shift_weeks, _threshold_min):
    ave1 = getAveFromTable(_cur, _table, _field, _platform_name, _end_date, _last_weeks, _threshold_min)
    end_date_new = _end_date - _shift_weeks * SECONDSPERWEEK
    ave2 = getAveFromTable(_cur, _table, _field, _platform_name, end_date_new, _last_weeks, _threshold_min)
    return ave1 / ave2 if ave2 != 0 else 0

#计算表中指标的平均值(不计算零)
def getAveFromTable(_cur, _table, _field, _platform_name, _end_date, _last_weeks, threshold_min):
    end_date = _end_date
    start_date = end_date - (_last_weeks - 1) * SECONDSPERWEEK
    stringSQL = "SELECT `" + str(_field) + "` FROM " + _table + " WHERE `platform_name` = '" + _platform_name + "' AND `date` >= '" + str(start_date) + "' AND `date` <= '" + str(end_date) + "' ORDER BY date DESC"               
    ret = _cur.execute(stringSQL)
    if ret == 0:
        return 0
    else:
        value_list = []
        for row in _cur.fetchall():
            if float(row[0]) > threshold_min:
                value_list.append(float(row[0]))
    return getWeightedMean(delZeroValue(value_list))

#计算表中指标的平均值(不计算零,贪婪算法)
def getAveFromTableGreedy(_cur, _table, _field, _platform_name, _end_date, _last_weeks, threshold_min):
    date_list = getDifferentFieldlist(_table, _cur, "date") #从小到大排列
    end_date_index = date_list.index(_end_date)
    last_weeks = 0
    value_list = []
    for end_date in date_list[end_date_index::-1]:
        stringSQL = "SELECT `" + str(_field) + "` FROM " + _table + " WHERE `platform_name` = '" + _platform_name + "' AND `date` = '" + str(end_date) + "'"               
        ret = _cur.execute(stringSQL)
        if ret == 0:
            continue
        else:
            _temp = float(_cur.fetchone()[0])
            if _temp > threshold_min:
                last_weeks += 1
                value_list.append(_temp)
        if last_weeks == _last_weeks:
            break
    return getWeightedMean(delZeroValue(value_list))

#在指标计算中，通过status数值获得不同的权重用于后续的计算
def getWeightByStatus(_status):
    if 0.199 < _status <= 0.599:
        return 0.8
    elif _status == 0:
        return 1.0
    elif 0.599 < _status <= 0.899:
        return 0.4
    else:
        return 0

#检查表中是否有某个字段，如果没有的话就添加这个字段
def insertField(_conn, _cur, _table, _field, _type):
    _table = str(_table)
    _field = str(_field)
    _type = str(_type)
    stringSQL = "show columns from " + _table + " like '" + _field + "'"
    num = _cur.execute(stringSQL)
    if num == 0:
        stringSQL = "ALTER TABLE " + _table + " ADD COLUMN `" + _field + "` " + _type
        _cur.execute(stringSQL)
        _conn.commit()

#去掉一个列表中的零元素
def delZeroValue(_list):
    value_list = []
    for value in _list:
        if value != 0:
            value_list.append(value)
    return value_list

#返回两个列表的商（前者是分母，后者是分子）
def divList(_list1, _list2):
    value_list = []
    for i in range(min(len(_list1), len(_list2))):
        value_list.append(div(_list1[i],_list2[i]))
    return value_list 

#两个数的除法，去掉一些特殊情况
def div(a,b):
    if a == None or a == 0 or b == None:
        return 0
    else:
        return float(b)/float(a)
    
def tianyidiv_update(ratio, a, b, c, d):
    A, B = checkzero_update(div(a,c), div(b,d))
    return ratio*A+(1-ratio)*B

def xiebodiv(ratio, a, b, c, d):
    A, B = checkzero_update(div(a,c), div(b,d))
    if A > 1:
        if B > 1:
            return 0
        return B
    else:
        if B > 1:
            return A
        return ratio*A+(1-ratio)*B
#双源查找函数
def checkzero_update(a,b):
    if a == 0 or a is None:
        if b == 0 or b is None:
            return 0,0
        return b,b
    else:
        if b == 0 or b is None:
            return a,a
        return a,b

#双源查找函数
def resetMarketShareGrowth(_cur, _conn, _table):
    print "重置" + _table + "表的 market_share_growth"
    platform_id_list = getDifferentFieldlist(_table, _cur, "platform_id")
    date_list = getDifferentFieldlist(_table, _cur, "date")
    dates_number = len(date_list)
    total_market = [0] * dates_number
    for i in range(dates_number):
        _date = date_list[i]
        stringSQL = "SELECT SUM(weekly_lending) FROM " + _table + " WHERE `date` = '" + str(_date) + "'"
        _cur.execute(stringSQL)
        total_market[i] = _cur.fetchone()[0]
    for platform_id in platform_id_list:
        market_share = [0] * dates_number 
        for i in range(dates_number):
            if total_market[i] == 0:
                continue
            else:
                _date = date_list[i]
                stringSQL = "SELECT weekly_lending FROM " + _table + " WHERE `date` = '" + str(_date) + "' AND `platform_id` = '" + platform_id + "'"
                ret = _cur.execute(stringSQL)
                if ret == 0:
                    continue
                else:
                    market_share[i] = _cur.fetchone()[0] / total_market[i]
                if i >= LASTLENDINGWEEKS:
                    _this_week = market_share[i - LASTLENDINGWEEKS + 1:i + 1][::-1]
                    _last_week = market_share[i - LASTLENDINGWEEKS:i][::-1]
                    temp = getWeightedMean(delZeroValue(_last_week))
                    market_share_growth = 0 if temp == 0 else getWeightedMean(delZeroValue(_this_week)) / temp
                    if market_share_growth != 0:
                        stringSQL = "UPDATE " + _table + " SET `market_share_growth` = '" + str(market_share_growth) + "' WHERE `platform_id` = '" + platform_id + "' AND `date` = '" + str(_date) + "'"   
                        _cur.execute(stringSQL)
                        _conn.commit() 

#获取unicode汉字的首拼音
def getCnFirstLetter(_str):
    str_utf8 = _str.encode("utf-8")
    if str_utf8.startswith("鑫"):
        return "x"
    if str_utf8.startswith("煜"):
        return "y"
    if str_utf8.startswith("泓"):
        return "h"
    if str_utf8.startswith("呱"):
        return "g"
    if str_utf8.startswith("掮"):
        return "q"
    if str_utf8.startswith("珞"):
        return "l"
    if str_utf8.startswith("甬"):
        return "y"
    if str_utf8.startswith("昊"):
        return "h"
    if str_utf8.startswith("瀚"):
        return "h"
    if str_utf8.startswith("玺"):
        return "x"
    if str_utf8.startswith("鸢"):
        return "y"
    if str_utf8.startswith("翡"):
        return "f"
    if str_utf8.startswith("饷"):
        return "x"
    if str_utf8.startswith("奕"):
        return "y"
    if str_utf8.startswith("吆"):
        return "y"
    if str_utf8.startswith("柘"):
        return "z"
    if str_utf8.startswith("睿"):
        return "r"
    if str_utf8.startswith("沐"):
        return "m"
    if str_utf8.startswith("喵"):
        return "m"
    if str_utf8.startswith("逍"):
        return "x"
    if str_utf8.startswith("巽"):
        return "x"
    if str_utf8.startswith("喔"):
        return "w"
    if str_utf8.startswith("祺"):
        return "q"
    if str_utf8.startswith("昱"):
        return "y"
    if str_utf8.startswith("汴"):
        return "b"
    if str_utf8.startswith("龍"):
        return "l"
    if str_utf8.startswith("麟"):
        return "l"
    _str_temp=_str.encode("GBK")
#     if _str_temp<"\xb0\xa1" or _str_temp>"\xd7\xf9":
#         return ""
    
    if _str_temp[0].isdigit():
        return "0-9"
    if _str_temp[0] in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ":
        return _str_temp[0].lower()
    if _str_temp<"\xb0\xc4":
        return "a"
    if _str_temp<"\xb2\xc0":
        return "b"
    if _str_temp<"\xb4\xed":
        return "c"
    if _str_temp<"\xb6\xe9":
        return "d"
    if _str_temp<"\xb7\xa1":
        return "e"
    if _str_temp<"\xb8\xc0":
        return "f"
    if _str_temp<"\xb9\xfd":
        return "g"
    if _str_temp<"\xbb\xf6":
        return "h"
    if _str_temp<"\xbf\xa5":
        return "j"
    if _str_temp<"\xc0\xab":
        return "k"
    if _str_temp<"\xc2\xe7":
        return "l"
    if _str_temp<"\xc4\xc2":
        return "m"
    if _str_temp<"\xc5\xb5":
        return "n"
    if _str_temp<"\xc5\xbd":
        return "o"
    if _str_temp<"\xc6\xd9":
        return "p"
    if _str_temp<"\xc8\xba":
        return "q"
    if _str_temp<"\xc8\xf5":
        return "r"
    if _str_temp<"\xcb\xf9":
        return "s"
    if _str_temp<"\xcd\xd9":
        return "t"
    if _str_temp<"\xce\xf3":
        return "w"
    if _str_temp<"\xd1\x88":
        return "x"
    if _str_temp<"\xd4\xd0":
        return "y"
    if _str_temp<"\xd7\xf9":
        return "z"
    print str_utf8
    return _str_temp[0]     

#去掉字符串内的html标签
def delTag(_html):
    str1 = re.subn('<[^>]*>', '', _html)[0]
    str2 = re.subn('<.*', '', str1)[0]
    return str2

#随机函数，均匀返回两个数之间的数
def r(_min, _max):
    min_temp = min(_min,_max)
    max_temp = max(_min,_max)
    return random.random() * (max_temp - min_temp) + _min  

#计算安投宝模型偏差
def computeATBDeviation():
    V = "V_view"
    conn_ddpt_test = getConn(DDPT_DATAHOSTHOST, USERNAME, PASSWORD, DB, PORT)
    cur_db = getCursors(conn_db)
    initializeCursors(cur_db)
    min_temp = min(_min,_max)
    max_temp = max(_min,_max)
    return random.random() * (max_temp - min_temp) + _min    

if __name__ == '__main__':

    table_E1 = "platform_quantitative_data_E1"
    conn_db = getConn(DBHOST_OUT, USERNAME, PASSWORD, DB, PORT)
    cur_db = getCursors(conn_db)
    conn_dev = getConn(DEVHOST_OUT, USERNAME, PASSWORD, DB, PORT)
    cur_dev = getCursors(conn_dev)
    initializeCursors(cur_db, cur_dev)
    
    print getInterestDate(12345, 123, 345, "1426568427|np****xf|2,000.00|1426568432|wu****hz|1,288.71|1426568444|xu****09|72.51|")
    print getInterestDate(12345, 123, 123, "1426568427|np****xf|2,000.00|1426568432|wu****hz|1,288.DAYSPERWEEK1|1426568444|xu****09|72.51|")
    l1 = [1, 2, 3, 4, 5, 6]
    print insertTopQueue(l1, 4, 10)
    print insertTopQueue(l1, 4, 10)
    print insertTopQueue(l1, 4, 10)
    print insertTopQueue(l1, 4, 10)
    print insertTopQueue(l1, 4, 10)
    print insertTopQueue(l1, 4, 10)
    print getHHI([1, 1, 1, 1])
    print getColumnSum({1:[1, 2, 3], 2:[3, 4, 5]})
    print getColumnSum({1:[1, 2, 3], 2:[3, 4, 5]}, 1)
    print getColumnSum({1:1, 2:2})
    print getColumnSum({1:[1], 2:[2]})
    a = None
    a = replaceNullData(a)
    print a
    b = None
    c = ""
    a = "123"
    (a, b, c) = replaceNullData(a,b, c)
    print a,b, c
    z = get2DEmptyArray(10)
    print get2DEmptyArray(10)
    print id(z[1])
    print id(z[2])
    a = [[], [], []]
    insertTopQueue(a[1], 4, 10)
    insertTopQueue(a[1], 4, 10)
    insertTopQueue(a[1], 4, 10)
    insertTopQueue(a[1], 4, 10)
    insertTopQueue(a[1], 4, 10)
    print a
    a = "10.0"
    b = "abc"
    print replaceNullData(a, b)
    a = {}.fromkeys(["abc", "def"], get2DEmptyArray(20))
    a["abc"][1] = 2
    print a
    print getRandomTimestamp("20130301")
    print sortDictByValue({"a":[1,10],"b":[2,9],"c":[3,8],"d":[4,7]},0)
    print sortDictByValue({"a":[1,10],"b":[2,9],"c":[3,8],"d":[4,7]},1)
    print getVectorInnerProduct([1,2,3],[4,5,6])
    a=return2para()[0]
    print a
    a=[53.86089, 66.39954, 46.347649999999994, 46.2, 0.0, 61.88869, 31.60232, 0.0, 70.65647, 93.66763, 14.913390000000001, 24.788690000000003, 31.6, 100.0, 83.33188, 20.0, 40.0, 30.0, 61.813590000000005, 45.718399999999995, 52.73217, 53.07657, 40.0, 45.79289, 100.0, 60.0, 52.864779999999996, 51.94557, 55.07320000000001, 89.42003, 75.0, 80.66015999999999, 48.99999999999999, 54.605959999999996, 78.19618, 0.0, 0.0, 18.0, 0.0, 0.0]
    b=[0.05, 0.064735, 0.0635625, 0.059325, 0.057975, 0.04638, 0.04239, 0.041195, 0.033912, 0.02825, 0.025434, 0.025434, 0.025425, 0.0253825, 0.02373, 0.023, 0.023, 0.0226, 0.0226, 0.0211875, 0.01908, 0.01908, 0.0184, 0.01656, 0.0142, 0.0136675, 0.01272, 0.01272, 0.01177, 0.011595, 0.01065, 0.0098875, 0.0092, 0.008478, 0.0059325, 0.005652, 0.00355, 0.00355, 0.00184, 0.0, 0, 0]
    print getVectorInnerProduct(a,b)
    print getNormalization([1,2,3])
    print getCenterSum([1,2,3])
    print getQueryTime()
    print checkThresholdValue(1,2,3)
    print checkThresholdValue(2,1,3)
    print checkThresholdValue(100,1,None)
    print checkThresholdValue(100,101,None)
    print checkThresholdValue(100,1,105)
    print checkThresholdValue(100,None,None)
    print checkThresholdValue(100,None,105)
    print checkThresholdValue(10000.0,100.0,27610.0)
    print getDictByTxt("borrower_list.txt")
    mergeTxt("borrower_list.txt", "platform_id_list_sorted.txt", "id_sorted.txt")
    print getDateTimestamp(1357401600)
    print getDateTimestamp(1357401600 + 1)
    print calculateLinearValue(2,[9177120, 9324460,0,9873890],1,3)
    print calculateGrowth(cur_db, table_E1, "weekly_new_investor", "15贷", 1417881600, 4,1,0)
    print getNoneZeroListByPeriod(cur_db, table_E1, ["top5_ratio_loan", "weekly_total_investor"], "15贷", 1416067200, 4, 0)
    print checkValid(["1", "2","3","4"], [1,1,0,0], ["1"], 2)
    print checkValid(["1", "2","3","4","5"], [1,1,0,0,0], ["1"], 2)
    print checkValid(["1", "2","3","4","5"], [1,1,0,0,0], ["3"], 2)
    print getValueByPeriod(cur_db, table_E1, "top5_ratio_loan", "15贷", 1416067200, 4)
    #insertField(conn_dev, cur_dev, "index_weekly_report", "top5_ratio_loan1111", "DOUBLE DEFAULT NULL")
    a = {}
    for index in [1,2]:
        a[index] = []
    a[1].append(2)
    print a
    #print tianyidiv(0.3,1,0.1,None,2.0)
    print xiebodiv(0.3,None,None,None,None)
    print getLastMonthString("2015-12")
    print getLastMonthString("2015-01")
    a = "1416539379|c*arychen|74100|1416539284|w*iye137|200000|1416539011|林*梅L|1000|1416538723|林*梅L|500|1416538711|h*zd22|1186001416538552|w*mm|15000|1416538205|A*8A|50000|1416538073|h*jin518|3000|1416537749|l*cancan838|20000|1416537634|a*ines|1000001416537354|z*ongyingxing|10000|1416537341|l*lu_lyt|2000|1416537203|M*imeiok@163.com|20000|1416537170|z*ongyingxing|2100|1416537075|x*xb1128zx|10001416536953|3*7017350@qq.com|2000|1416536813|j*angruifen|130000|1416535340|L*JM|10000|1416535175|z*ao4609|40700|1416534665|A*8A|500001416534607|a*traw|2000|1416534564|红*君|1000|1416534511|w*izeair|10000|1416534254|L*no|200000|1416534233|x*kxj|400001416533900|J*hn.Tse|6000|1416533538|a*traw|5500|1416533356|b*ue815|10000|1416533338|z*zamo|2000|1416533256|z*engmingze|100001416532912|z*engmingze|10000|1416532792|s*wht|900|1416532720|y*y567|94000|1416532129|a*ang513|10000|1416532077|h*ndsomelin|141001416532050|z*zz22|1000|1416531818|o*ange张嘉惠|100|1416531591|z*engmingze|10000|1416531178|l*h15819019876|5000|1416531105|x*zyq@126.com|100001416529877|j*n871|100|1416499789|a*tpower|6000|1416498117|w*nxp|10000|1416497792|w*nxp|10100|1416497329|w*vb204|20001416496332|招*进步5577|400000|1416495861|s*ndyfu|5000|1416495145|x*j1984|3000|1416494675|l*p6982848|6000|1416492115|p*09091008|150001416491366|S*ar,Lin|1100|1416490785|P*terPoon|15100|1416489016|h*zd22|35000|1416486891|c*enjp3|1000|1416486012|3*9600707|150001416484003|e*ithbb|20000|1416483907|h*remc|10000|1416482031|f*artasd|34000|1416479975|f*yanasdf|10200|1416479519|M*imeiok@163.com|100001416479004|T*mato|70000|1416478320|z*dge|100|1416475128|S*ar,Lin|1000|1416473839|甜*410|10000|1416472970|h*jin518|30001416472011|s*ffee|15700"
    print getInterestDate(0, 0, 0, a)[0]
    #resetMarketShareGrowth(cur_db, conn_db, "platform_quantitative_data_E1")
    print getCnFirstLetter("圈".decode("utf-8"))
    print getCnFirstLetter("Abc".decode("utf-8"))
    print getCnFirstLetter("安".decode("utf-8"))
    print getCnFirstLetter("bbb".decode("utf-8"))
    print getCnFirstLetter("鑫脉财富".decode("utf-8"))
    print getCnFirstLetter("1ab".decode("utf-8"))
    test = PinYin()
    test.load_word()
    print test.hanzi2pinyin("鑫")[0][0]
    string = "808你好808"
    print "in: %s" % string
    print "out: %s" % str(test.hanzi2pinyin(string=string))
    print "out: %s" % test.hanzi2pinyin_split(string=string, split="-")
    string = "卡"
    print str(test.hanzi2pinyin(string=string))
    print delTag("<!-- 投>资查看更多</a></div></div></div><!-- 投资")
    for i in range(20):
        print r(0.8, 1.2)
    print [r(0.8, 1.2) for x in range(10)]
    investor = "1425474414|黄女士|5,000.00|1425474408|周女士|5,000.00|1425474394|帅波|20,000.00|1425474382|李先生|5,049.00|1425474376|谢先生|230.00|1425474370|易学会|5,000.00|1425476534|张女士|5,500.00|1425476526|张先生|2,120.00|1425476475|钟女士|2,000.00|1425476474|张女士|4,810.00|1425476470|王先生|261.00|1425476468|lflong085|6,188.00|1425467319|左先生|200.00|1425467279|何女士|10,000.00|1425467209|张先生|320.00|1425467190|尹女士|2,092.00|1425467125|汪女士|5,100.00|1425467115|人草木|114.00|1439914366|马女士|4,525.00|1438123514|xuewawa|500.00|1437402048|罗|4,460.00|1437401890|罗|500.00|1437401456|罗|100.00|1437360870|马女士|28,913.00|1425474365|黄女士|10,000.00|1425474364|chukee|10,000.00|1425474361|旺财神|10,000.00|1425474351|ALV930|10,000.00|1425474337|郑女士|4,987.00|1425474332|高女士|600.00|1425476458|黄妞妞|500.00|1425476417|俄罗斯美女|8,010.00|1425476416|沈先生|3,230.00|1425476412|付先生|2,513.00|1425476405|耿先生|9,031.00|1425476399|马先生|3,000.00|1425467100|噗噗|4,000.00|1425467056|吴女士|2,000.00|1425467011|kalight|5,000.00|1425466998|丁先生|20,000.00|1425466975|星雨|10,000.00|1425466954|高女士|10,000.00|1437360853|马女士|7,650.00|1437360774|马女士|39,550.00|1437360729|马女士|2,420.00|1437360616|马女士|642.00|1437360550|马女士|6,300.00|1437315071|文利|110.00|1425474318|丁女士|4,000.00|1425474317|何先生|10,000.00|1425474316|李女士|2,000.00|1425474309|倪先生|4,000.00|1425474301|高级理财师|5,000.00|1425474295|仇先生|100.00|1425476398|张先生|26,005.00|1425476396|李先生|100.00|1425476346|彩虹|5,000.00|1425476320|赵先生|10,202.00|1425476305|大鼠|1,000.00|1425476270|李先生|36,000.00|1425466892|张先生|2,100.00|1425466879|王先生|100.00|1425466821|邓先生|10,000.00|1425466819|周先生|230.00|1425466781|吴女士|10,000.00|1425466665|张先生|20,000.00|1437314820|文利|400.00|1436766993|罗|100.00|1436688835|罗|9,840.00|1435893404|苏先生|1,010.00|1434629784|陈先生|1,784.00|1431262648|别忘了|305.00|1425474289|刘先生|1,500.00|1425474288|不再遇见Lin|10,000.00|1425474287|哟哟切克闹|100.00|1425474281|吴女士|4,020.00|1425474280|韩先生|1,000.00|1425474279|韩先生|10,000.00|1425476242|徐先生|2,000.00|1425476215|黄先生|10,000.00|1425476212|鱼儿在水中游|1,022.00|1425476184|任先生|510.00|1425476166|刘先生|5,000.00|1425476145|林先生|3,000.00|1425466604|朱先生|14,805.00|1425466562|武女士|600.00|1425466531|杨先生|100.00|1425466505|张先生|500.00|1425466489|王先生|500.00|1425466374|方先生|2,135.00|1431261850|别忘了|195.00|1430787106|朱女士|1,994.00|1430227976|占先生|4,116.00|1430145624|占先生|1,000.00|1430087945|胡先生|5,000.00|1428672483|zibai2|110.00|1425474277|曹先生|1,000.00|1425474277|杨先生|5,000.00|1425474272|李先生|10,000.00|1425474270|天天赢|4,000.00|1425474265|孙先生|5,000.00|1425474257|果实|240.00|1425476137|罗先生|19,000.00|1425476136|鲍女士|5,036.00|1425476136|王女士|100.00|1425476122|王先生|3,004.00|1425476095|吴先生|6,335.00|1425476084|张先生|5,000.00|1425466368|我要做土豪|10,000.00|1425466340|孙志民|99,999.00|1425466309|彩云天空|11,000.00|1425466281|大兵|5,000.00|1425466279|巴菲特仑苏|30,158.00|1425466172|陈先生|200.00|1428366715|行云流水|12,335.00|1428366341|行云流水|1,976.00|1428337552|行云流水|5,071.00|1428309792|行云流水|126.00|1428309474|行云流水|397.00|1428296996|行云流水|10,095.00|1425474249|浪漫一朵|10,000.00|1425474249|龙飞|1,003.00|1425474248|雪中飞|6,000.00|1425474246|拯救|14,000.00|1425474245|冯女士|5,105.00|1425474244|张女士|10,000.00|1425476026|黄女士|36,500.00|1425476020|王先生|601.00|1425476018|周女士|20,000.00|1425476010|蒋先生|1,000.00|1425475995|fcn|3,877.00|1425475946|周先生|100.00|1425466162|cindy|509.00|1425466149|田先生|5,030.00|1425466128|张先生|5,000.00|1425465987|孙先生|53,503.00|1425465818|陆伟定|30,000.00|1425465754|王女士|1,500.00|1428245555|bigluckyma|1,001.00|1428245482|bigluckyma|1,000.00|1428242850|张先生|10,000.00|1428242823|bigluckyma|2,000.00|1428242795|bigluckyma|2,000.00|1428240955|bigluckyma|500.00|1425474243|胡先生|5,000.00|1425474243|孙先生|1,000.00|1425474240|何女士|5,000.00|1425474236|宋先生|3,000.00|1425474234|孙先生|10,000.00|1425474230|刘女士|16,126.00|1425475931|肖先生|1,000.00|1425475931|耿先生|2,000.00|1425475929|万先生|2,400.00|1425475925|米妮|4,010.00|1425475899|buebue|500.00|1425475896|刘先生|5,000.00|1425465601|宋先生|1,800.00|1425465510|齐先生|7,000.00|1425465434|陈女士|5,000.00|1425465432|王先生|1,023.00|1425465421|CYBank|500.00|1425465256|王先生|2,500.00|1428230490|jeanjiu|1,500.00|1425488699|冯先生|5,077.00|1425488664|朱女士|5,000.00|1425488631|aurora|500.00|1425488484|阿波罗|110.00|1425488288|罗女士|25,966.00|1425474230|韦德夸夸|10,000.00|1425474229|天空|10,000.00|1425474228|wlf196|1,000.00|1425474226|胡先生|10,000.00|1425474224|尾尾|700.00|1425474222|空空|100.00|1425475879|吴先生|5,000.00|1425475847|郭先生|168.00|1425475835|朱女士|10,000.00|1425475821|蒋先生|10,118.00|1425475812|刘女士|3,000.00|1425475806|吊儿郎当|4,000.00|1425465241|Maxwill|100.00|1425465235|maomao2010|5,000.00|1425465220|何女士|5,000.00|1425465159|王女士|16,000.00|1425465031|李伯興|5,000.00|1425465028|张先生|5,000.00|1425488197|赵先生|1,000.00|1425488190|马先生|5,000.00|1425488177|朱女士|10,000.00|1425488136|冯先生|5,018.00|1425488095|花先生|3,000.00|1425488074|王先生|4,000.00|1425474220|吴先生|15,010.00|1425474219|左先生|4,000.00|1425474217|刘先生|20,073.00|1425474216|胡先生|20,000.00|1425474213|不过而而|5,000.00|1425474210|Susie|6,000.00|1425475800|米妮|2,000.00|1425475766|张先生|1,000.00|1425475741|刘先生|10,000.00|1425475736|鲍先生|1,000.00|1425475731|殷女士|1,000.00|1425475729|ChrisHu|100.00|1425465019|为你|3,000.00|1425465018|李女士|20,000.00|1425464925|李先生|65,030.00|1425464871|赵先生|286.00|1425464824|李伯興|5,000.00|1425464748|李女士|30,000.00|1425488063|热血青年|20,000.00|1425488062|花先生|2,000.00|1425487976|朱女士|10,000.00|1425487929|世界那麽大你該去看看|2,102.00|1425487812|王先生|1,000.00|1425487715|李先生|1,001.00|1425474210|丹丹小太阳|8,000.00|1425474208|李女士|5,000.00|1425474206|王先生|20,074.00|1425474202|吕先生|14,000.00|1425474197|尹先生|1,074.00|1425474193|杉青|5,000.00|1425475727|夏女士|9,091.00|1425475726|郭先生|5,000.00|1425475711|王先生|10,000.00|1425475708|米妮|2,000.00|1425475701|小小投资者|6,112.00|1425475698|覃先生|40,000.00|1425464661|刘先生|111.00|1425464493|孙先生|10,234.00|1425464439|羚子|185.00|1425464406|小谭同学|200.00|1425464405|涂先生|6,000.00|1425464263|苏先生|5,000.00|1425487680|朱女士|4,001.00|1425487664|王先生|4,246.00|1425487485|冀先生|903.00|1425487435|大胖|20,000.00|1425487383|周女士|10,000.00|1425487365|庞先生|101.00|1425474190|张女士|4,500.00|1425474189|林女士|6,003.00|1425474179|方先生|121.00|1425474178|小高|1,100.00|1425474177|陈先生|1,010.00|1425474176|张先生|5,000.00|1425475694|刘先生|10,000.00|1425475692|华先生|5,000.00|1425475689|杨先生|3,000.00|1425475683|徐先生|8,000.00|1425475671|孙先生|10,000.00|1425475664|江先生|340.00|1425464250|追风少年xu|513.00|1425464246|黄先生|2,000.00|1425464246|陈先生|600.00|1425464224|苟先生|1,001.00|1425464212|昊昊|500.00|1425464192|任先生|12,000.00|1425487114|唐女士|4,000.00|1425487040|大胖|10,000.00|1425487015|陈女士|40,000.00|1425486991|朱女士|5,000.00|1425486984|大胖|20,000.00|1425486968|王女士|500.00|1425474175|ALV930|10,080.00|1425474171|杨先生|3,000.00|1425474166|郭女士|1,000.00|1425474166|王女士|35,004.00|1425474165|杨先生|30,000.00|1425474160|熊飞扬|1,015.00|1425475663|山嫂|2,000.00|1425475600|黄先生|1,000.00|1425475599|米妮|1,000.00|1425475586|夏女士|141,312.00|1425475565|卜先生|2,000.00|1425475560|李先生|10,000.00|1425464163|孙女士|3,790.00|1425464153|吉祥|4,000.00|1425464153|陈先生|218.00|1425464084|阿亮|1,100.00|1425464054|吴先生|1,215.00|1425464013|哟哟切克闹|100.00|1425486788|张先生|5,000.00|1425486776|浪花一朵|10,000.00|1425486755|杨先生|205.00|1425486683|马女士|500.00|1425486533|殷先生|25,000.00|1425486512|黄先生|102,000.00|1425474157|倪女士|1,000.00|1425474156|许先生|12,399.00|1425474155|王先生|6,000.00|1425474154|易学会|5,000.00|1425474153|林女士|5,000.00|1425474151|静水流深ap|5,048.00|1425475554|刘先生|744.00|1425475552|复利1202|8,036.00|1425475550|天边最美的云彩|5,010.00|1425475545|陈先生|2,000.00|1425475541|李先生|2,000.00|1425475537|王先生|2,000.00|1425463988|哟哟切克闹|100.00|1425463973|李先生|2,898.00|1425463945|梁先生|2,500.00|1425463936|青山绿水|515.00|1425463922|陆国宪|10,700.00|1425463883|菡萏|5,000.00|1425486359|刘先生|1,000.00|1425486287|李先生|10,000.00|1425486248|张先生|1,500.00|1425485845|王女士|10,000.00|1425485779|郑先生|2,000.00|1425485715|谭先生|100.00|1425474147|篮子|2,056.00|1425474145|杨先生|1,075.00|1425474142|刘女士|5,000.00|1425474141|赵女士|514.00|1425474140|肉肉|3,000.00|1425474139|2015理财ing|3,064.00|1425475534|得克服|6,925.00|1425475534|张女士|10,001.00|1425475534|范先生|1,000.00|1425475532|熊女士|40,008.00|1425475530|陈先生|200,000.00|1425475513|孙女士|20,000.00|1425463763|李先生|700.00|1425463735|胡先生|5,000.00|1425463719|于女士|1,000.00|1425463675|阿福|8,000.00|1425463635|白先生|20,000.00|1425463482|郭先生|3,000.00|1425485627|陈先生|500.00|1425485287|王先生|1,000.00|1425485243|许先生|1,000.00|1425485186|陈女士|9,030.00|1425485158|韩先生|10,000.00|1425485133|严先生|101.00|1425474139|张先生|1,088.00|1425474139|快乐的胖子|50,000.00|1425474138|李先生|5,000.00|1425474138|李女士|1,000.00|1425474137|崇山|25,001.00|1425474136|xqz16|4,500.00|1425475508|秦先生|5,000.00|1425475505|复活的斗士|1,000.00|1425475505|高女士|1,500.00|1425475504|刘先生|10,000.00|1425475503|刘先生|2,000.00|1425475502|zizhxiapp|6,099.00|1425463366|天天向上1224|500.00|1425463317|朱先生|13,809.00|1425463302|X平方|888.00|1425463288|感应区|2,001.00|1425463238|小子|9,900.00|1425463184|徐先生|2,000.00|1425484725|zghclevet|2,000.00|1425484637|罗女士|20,010.00|1425484601|亲亲|708.00|1425484512|David|18,008.00|1425484400|甄先生|15,000.00|1425484383|黄先生|2,845.00|1425474136|杨先生|1,032.00|1425474133|蓝先生|5,000.00|1425474133|靳先生|10,028.00|1425474133|余先生|2,010.00|1425474132|王先生|2,052.00|1425474132|王女士|10,000.00|1425475502|朱女士|10,000.00|1425475502|曾先生|837.00|1425475502|沐沐和汐汐的爸爸|1,009.00|1425475500|金女士|200.00|1425475500|蒋女士|200.00|1425475500|Shirley|1,000.00|1425463132|汤先生|10,000.00|1425463130|帅先生|10,000.00|1425463123|朱先生|100.00|1425463076|黄妞妞|500.00|1425463060|赵先生|5,000.00|1425463030|张先生|100.00|1425484381|屈先生|9,100.00|1425484238|王先生|500.00|1425484007|饶先生|1,000.00|1425483938|陈先生|520.00|1425483865|心晴|10,000.00|1425483757|王先生|10,000.00|1425474132|孙先生|530.00|1425474131|叶女士|5,154.00|1425474130|十年|5,030.00|1425474129|廖先生|3,000.00|1425474128|JACKIETO|2,000.00|1425474128|翼尖涡流|100.00|1425475500|吴先生|366.00|1425475500|孙先生|100.00|1425475500|孤星寒|200.00|1425475500|冯先生|177.00|1425475500|吖咪|1,224.00|1425475500|李先生|1,000.00|1425463029|骆先生|1,013.00|1425462893|何女士|50,000.00|1425462850|李先生|5,000.00|1425462817|小草|2,000.00|1425462814|孙先生|10,000.00|1425462737|张先生|20,000.00|1425483757|李先生|110.00|1425483751|李女士|3,061.00|1425483736|你的世界我不懂|134.00|1425483705|邵先生|1,000.00|1425483649|苏先生|10,000.00|1425483638|沈女士|301.00|1425474126|飞鱼|5,149.00|1425474126|pdm5945zh|100.00|1425474124|刁先生|3,000.00|1425474123|刘先生|10,000.00|1425474122|沙文|5,000.00|1425474121|Lia|5,000.00|1425475500|肖先生|5,055.00"
    print 1111111,countGross(investor,3)
